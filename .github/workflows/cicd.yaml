# Name of the workflow
name: Deploy Application Docker Image to EC2 instance

# This workflow runs on any push to the 'main' branch
on:
  push:
    branches: [main]

jobs:
  # The first job builds and pushes the Docker image to Amazon ECR
  Continuous-Integration:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPO }}
          IMAGE_TAG: latest
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

  # The second job deploys the Docker image on your self-hosted EC2 runner
  Continuous-Deployment:
    # This job will only run after the 'Continuous-Integration' job succeeds
    needs: Continuous-Integration
    # This job runs on your EC2 instance that is configured as a self-hosted runner
    runs-on: self-hosted
    steps:
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1 # Using v1 for self-hosted runner compatibility
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

      - name: Pull and Run Docker Container
        run: |
          # Define image URI
          IMAGE_URI="${{ secrets.AWS_ECR_LOGIN_URI }}/${{ secrets.ECR_REPO }}:latest"

          # Pull the latest image from ECR to ensure we have the newest version
          docker pull $IMAGE_URI

          # Run the new Docker container.
          # Note: This simplified command may cause an error on future deployments
          # if an old container is still running and using port 8080.
          docker run -d \
            -e GOOGLE_API_KEY="${{ secrets.GOOGLE_API_KEY }}" \
            -e PINECONE_API_KEY="${{ secrets.PINECONE_API_KEY }}" \
            -p 8080:8080 \
            $IMAGE_URI